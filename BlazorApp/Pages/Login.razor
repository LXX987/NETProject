@page "/"
@layout LoginLayout
@using System.Net.Http
@using BlazorApp.Service
@using BlazorApp.Data
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject UserApiClient UserService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
<PageTitle>Counter</PageTitle>

<div class="body">
    <p class="title">登录</p>
    <div class="name">
        <Row>
            <Col Span="4"><p class="content">邮箱：</p></Col>
            <Col Span="20">
                <Input Placeholder="请输入邮箱"  Size="@InputSize.Large" @bind-Value="@email">
                    <Prefix>
                        <Icon Type="user" />
                    </Prefix>
                </Input>
            </Col>
        </Row>
        <Row>
            <Col Span="4"><p class="content">密码：</p></Col>
            <Col Span="20">
                <InputPassword @bind-Value="@psw" Placeholder="请输入密码" Size="@InputSize.Large"/>
            </Col>
        </Row>
        <Row>
            <Col Span="4"><p class="content">身份：</p></Col>
            <Col Span="20">
                <RadioGroup @bind-Value="type" Size="large">
                    <Radio RadioButton Value="@("0")">普通用户</Radio>
                    <Radio RadioButton Value="@("1")">团长</Radio>
                </RadioGroup>
            </Col>
        </Row>
    </div>
    <p class="content"><button class="btn btn-primary" @onclick="login">登录</button></p>
    <p class="content"><a href="/register">没有账号？点击注册</a></p>
    
<CascadingAuthenticationState>

    <AuthorizeView>
        <Authorized>登录成功</Authorized>
        <NotAuthorized></NotAuthorized>
    </AuthorizeView>
    
</CascadingAuthenticationState>
</div>

@code {
    RenderFragment actionSetting(Func<Task> clickActionAsync, Dictionary<string, object> iconAttributes) =>
        @<Icon @attributes="@iconAttributes" OnClick="@clickActionAsync" />
    ;

    private bool visible = false;
    private InputPassword _inputPassword;

    Dictionary<string, object> hideAttributes  = new() {
        ["Type"] = "eye-invisible",        
        ["Style"] = ""
    };

    Dictionary<string, object> showAttributes  = new() {        
        ["Type"] = "eye",        
        ["Style"] = "color: #1890ff"
    };

    Dictionary<string, object> attributes = new() {
        ["Class"] = "custom-password-icon",
        ["Type"] = "eye-invisible",
        ["Theme"] = "outline"
    };

    private async Task OnClick() 
    {
        Console.WriteLine("Custom icon clicked");
        visible = !visible;
        if (visible)
            attributes = showAttributes;
        else
            attributes = hideAttributes;
        await _inputPassword.Focus();
    }
    string email { get; set; }
    string psw { get; set; }
    string type = "0";
    private int test;

    [Inject] public MessageService MsgSvr { get; set; }
    [Inject] public AuthenticationStateProvider AuthProvider { get; set; }

    UserDto model = new UserDto();
    bool isLoading;

    protected async Task login()
    {
        isLoading = true;
        User user=new User();
        user.user_email = email;
        user.user_pwd = psw;
        user.userType = type;
        user.userName = "";

        var httpResponse = await Http.PostAsJsonAsync("https://localhost:7232/api/user/login", user);
        UserDto result = await httpResponse.Content.ReadFromJsonAsync<UserDto>();

        if (string.IsNullOrWhiteSpace(result?.Token) == false )
        {
            MsgSvr.Success($"登录成功");
            await sessionStorage.SetItemAsync("token", result?.Token);
            //Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", result?.Token);
            //((AuthProvider)AuthProvider).MarkUserAsAuthenticated(result);
            if (type == "0")
            {
                NavigationManager.NavigateTo("Products");
            }
            else
            {
                NavigationManager.NavigateTo("shopCenter");
            }
        }
        else
        {
            MsgSvr.Error($"用户名或密码错误");
        }
        isLoading = false;
       InvokeAsync( StateHasChanged);
    }
}
