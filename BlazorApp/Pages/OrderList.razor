@page "/OrderList"
@using BlazorApp.Data
@using BlazorApp.Service
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Net.Http
@inject HttpClient Http
@inject UserApiClient UserService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>OrderList</h3>
<CascadingAuthenticationState>
<AuthorizeView>
    <p>You can only see this content if you're authenticated.</p>
</AuthorizeView>
</CascadingAuthenticationState>
<Row>
    <Col Span="12">
<div>
    <Avatar Size="64" Src="https://img1.imgtp.com/2022/06/24/YZy9Rxfn.png" />
    <span>@name</span>
</div>
    </Col>
    <Col Span="12">
        <p>用户ID：@user.user_id</p>
        <p>用户邮箱：@user.user_email</p>
    </Col>
</Row>
<Divider />

<h4 class="mb-2">订单列表</h4>
<table class="table">
    <thead>
        <tr>
            <th>订单号</th>
            <th>商品ID</th>
            <th>下单时间</th>
            <th>商品数量</th>
            <th>总价</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody>
        @if(data==null)
        {
            <p>暂无数据</p>
        }
        else
        {
            @foreach(var item in data)
            {
                <tr>
                    <td>@item.temporaryOrder_id</td>
                    <td>@item.commodity_id</td>
                    <td>@item.time</td>
                    <td>@item.count</td>
                    <td>@item.total_prince.ToString("C")</td>
                    <td><a href="/Order/@item.temporaryOrder_id">查看订单详情</a></td>
                </tr>
            }
        }
        
        
    </tbody>
</table>
@code {
    private TemporaryOrder[]? data ;
    //List<TemporaryOrder> data = new List<TemporaryOrder>();
    TemporaryOrder order = new TemporaryOrder();
    private User user = new User();
    string name = "张三";
    /*protected override async Task OnInitializedAsync()
        {
        order.temporaryOrder_id=1;
        order.commodity_id = 1;
        order.time = new DateTime(2022,6,18,11,11,11);
        order.count=2;
        order.total_prince = 50;
        data.Add(order);
        data.Add(order);
        data.Add(order);
        var token = await sessionStorage.GetItemAsync<string>("token");
        user = await UserService.SearchUser(token);
    }*/
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        order.temporaryOrder_id=1;
        order.commodity_id = 1;
        order.time = new DateTime(2022,6,18,11,11,11);
        order.count=2;
        order.total_prince = 50;
        //data.Add(order);
        //data.Add(order);
        //data.Add(order);
        var token = await sessionStorage.GetItemAsync<string>("token");
        user = await UserService.SearchUser(token);
        data = await UserService.GetOrderList(token);
    }
}
